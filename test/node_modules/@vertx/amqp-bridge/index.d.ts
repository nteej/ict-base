/*
 * Copyright 2020 ES4X
 *
 * ES4X licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

import { Handler, AsyncResult } from '@vertx/core';

import { Vertx } from '@vertx/core';
import { MessageConsumer } from '@vertx/core';
import { MessageProducer } from '@vertx/core';
import { AmqpBridgeOptions } from './options';

/**
 * Vert.x AMQP Bridge. Facilitates sending and receiving AMQP 1.0 messages.
 */
export abstract class AmqpBridge {
  /**
   * Creates a Bridge.
   */
  static create(vertx: Vertx) : AmqpBridge;

  /**
   * Creates a Bridge with the given options.
   */
  static create(vertx: Vertx, options: AmqpBridgeOptions) : AmqpBridge;

  /**
   * Starts the bridge, establishing the underlying connection.
   */
  start(hostname: string, port: number, username: string, password: string, resultHandler: ((res: AsyncResult<AmqpBridge>) => void) | Handler<AsyncResult<AmqpBridge>>) : void;

  /**
   * Starts the bridge, establishing the underlying connection.
   */
  start(hostname: string, port: number, resultHandler: ((res: AsyncResult<AmqpBridge>) => void) | Handler<AsyncResult<AmqpBridge>>) : void;

  /**
   * Creates a consumer on the given AMQP address.
   *
   * This method MUST be called from the bridge Context thread, as used in the result handler callback from the start
   * methods. The bridge MUST be successfully started before the method is called.
   */
  createConsumer<T>(amqpAddress: string) : MessageConsumer<T>;

  /**
   * Creates a producer to the given AMQP address.
   *
   * This method MUST be called from the bridge Context thread, as used in the result handler callback from the start
   * methods. The bridge MUST be successfully started before the method is called.
   */
  createProducer<T>(amqpAddress: string) : MessageProducer<T>;

  /**
   * Shuts the bridge down, closing the underlying connection.
   */
  close(resultHandler: ((res: AsyncResult<void>) => void) | Handler<AsyncResult<void>>) : void;

  /**
   * Set an end handler. This will fire if the underlying connection is unexpectedly disconnected or remotely closed.
   */
  endHandler(endHandler: ((res: void) => void) | Handler<void>) : void;
}
