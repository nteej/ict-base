/*
 * Copyright 2020 ES4X
 *
 * ES4X licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

import { OpenSSLEngineOptions } from '@vertx/core/options';
import { ProxyOptions } from '@vertx/core/options';
import { Buffer } from '@vertx/core';
import { PemKeyCertOptions } from '@vertx/core/options';
import { JksOptions } from '@vertx/core/options';
import { PemTrustOptions } from '@vertx/core/options';
import { JdkSSLEngineOptions } from '@vertx/core/options';
import { PfxOptions } from '@vertx/core/options';

/**
 * Options for configuring the AmqpBridge.
 */
export class AmqpBridgeOptions {

  constructor();

  constructor(obj: AmqpBridgeOptions);

  getConnectTimeout(): number;

  setConnectTimeout(connectTimeout: number): AmqpBridgeOptions;

  /**
   * Sets the value to use as the container-id field in the AMQP Open frame. Some servers and clients use this for the
   * concept of a 'Client ID'. Defaults to null, which indicates a value will be generated by the bridge when the
   * underlying connection is made.
   */
  getContainerId(): string;

  /**
   * Sets the value to use as the container-id field in the AMQP Open frame. Some servers and clients use this for the
   * concept of a 'Client ID'. Defaults to null, which indicates a value will be generated by the bridge when the
   * underlying connection is made.
   */
  setContainerId(containerId: string): AmqpBridgeOptions;

  getCrlPaths(): string;

  addCrlPath(crlPaths: string): AmqpBridgeOptions;

  getCrlValues(): Buffer;

  addCrlValue(crlValues: Buffer): AmqpBridgeOptions;

  getEnabledCipherSuites(): string;

  addEnabledCipherSuite(enabledCipherSuites: string): AmqpBridgeOptions;

  getEnabledSaslMechanisms(): string;

  addEnabledSaslMechanism(enabledSaslMechanisms: string): AmqpBridgeOptions;

  getEnabledSecureTransportProtocols(): string;

  setEnabledSecureTransportProtocols(enabledSecureTransportProtocols: string): AmqpBridgeOptions;

  addEnabledSecureTransportProtocol(enabledSecureTransportProtocols: string): AmqpBridgeOptions;

  getHeartbeat(): number;

  setHeartbeat(heartbeat: number): AmqpBridgeOptions;

  getHostnameVerificationAlgorithm(): string;

  setHostnameVerificationAlgorithm(hostnameVerificationAlgorithm: string): AmqpBridgeOptions;

  getIdleTimeout(): number;

  setIdleTimeout(idleTimeout: number): AmqpBridgeOptions;

  getIdleTimeoutUnit(): any;

  setIdleTimeoutUnit(idleTimeoutUnit: any): AmqpBridgeOptions;

  getJdkSslEngineOptions(): JdkSSLEngineOptions;

  setJdkSslEngineOptions(jdkSslEngineOptions: JdkSSLEngineOptions): AmqpBridgeOptions;

  getKeyStoreOptions(): JksOptions;

  setKeyStoreOptions(keyStoreOptions: JksOptions): AmqpBridgeOptions;

  getLocalAddress(): string;

  setLocalAddress(localAddress: string): AmqpBridgeOptions;

  getLogActivity(): boolean;

  setLogActivity(logActivity: boolean): AmqpBridgeOptions;

  getMaxFrameSize(): number;

  setMaxFrameSize(maxFrameSize: number): AmqpBridgeOptions;

  getMetricsName(): string;

  setMetricsName(metricsName: string): AmqpBridgeOptions;

  getOpenSslEngineOptions(): OpenSSLEngineOptions;

  setOpenSslEngineOptions(openSslEngineOptions: OpenSSLEngineOptions): AmqpBridgeOptions;

  getPemKeyCertOptions(): PemKeyCertOptions;

  setPemKeyCertOptions(pemKeyCertOptions: PemKeyCertOptions): AmqpBridgeOptions;

  getPemTrustOptions(): PemTrustOptions;

  setPemTrustOptions(pemTrustOptions: PemTrustOptions): AmqpBridgeOptions;

  getPfxKeyCertOptions(): PfxOptions;

  setPfxKeyCertOptions(pfxKeyCertOptions: PfxOptions): AmqpBridgeOptions;

  getPfxTrustOptions(): PfxOptions;

  setPfxTrustOptions(pfxTrustOptions: PfxOptions): AmqpBridgeOptions;

  getProxyOptions(): ProxyOptions;

  setProxyOptions(proxyOptions: ProxyOptions): AmqpBridgeOptions;

  getReceiveBufferSize(): number;

  setReceiveBufferSize(receiveBufferSize: number): AmqpBridgeOptions;

  getReconnectAttempts(): number;

  setReconnectAttempts(reconnectAttempts: number): AmqpBridgeOptions;

  getReconnectInterval(): number;

  setReconnectInterval(reconnectInterval: number): AmqpBridgeOptions;

  /**
   * Sets whether the bridge should try to enable support for sending messages with a reply handler set, and replying to
   * messages using the message reply methods. Defaults to true. If the server does not advertise support for
   * 'anonymous sender' links then the bridge won't support reply handling regardless of this setting.
   */
  isReplyHandlingSupport(): boolean;

  /**
   * Sets whether the bridge should try to enable support for sending messages with a reply handler set, and replying to
   * messages using the message reply methods. Defaults to true. If the server does not advertise support for
   * 'anonymous sender' links then the bridge won't support reply handling regardless of this setting.
   */
  setReplyHandlingSupport(replyHandlingSupport: boolean): AmqpBridgeOptions;

  isReuseAddress(): boolean;

  setReuseAddress(reuseAddress: boolean): AmqpBridgeOptions;

  isReusePort(): boolean;

  setReusePort(reusePort: boolean): AmqpBridgeOptions;

  getSendBufferSize(): number;

  setSendBufferSize(sendBufferSize: number): AmqpBridgeOptions;

  getSniServerName(): string;

  setSniServerName(sniServerName: string): AmqpBridgeOptions;

  getSoLinger(): number;

  setSoLinger(soLinger: number): AmqpBridgeOptions;

  isSsl(): boolean;

  setSsl(ssl: boolean): AmqpBridgeOptions;

  getSslHandshakeTimeout(): number;

  setSslHandshakeTimeout(sslHandshakeTimeout: number): AmqpBridgeOptions;

  getSslHandshakeTimeoutUnit(): any;

  setSslHandshakeTimeoutUnit(sslHandshakeTimeoutUnit: any): AmqpBridgeOptions;

  isTcpCork(): boolean;

  setTcpCork(tcpCork: boolean): AmqpBridgeOptions;

  isTcpFastOpen(): boolean;

  setTcpFastOpen(tcpFastOpen: boolean): AmqpBridgeOptions;

  isTcpKeepAlive(): boolean;

  setTcpKeepAlive(tcpKeepAlive: boolean): AmqpBridgeOptions;

  isTcpNoDelay(): boolean;

  setTcpNoDelay(tcpNoDelay: boolean): AmqpBridgeOptions;

  isTcpQuickAck(): boolean;

  setTcpQuickAck(tcpQuickAck: boolean): AmqpBridgeOptions;

  getTrafficClass(): number;

  setTrafficClass(trafficClass: number): AmqpBridgeOptions;

  isTrustAll(): boolean;

  setTrustAll(trustAll: boolean): AmqpBridgeOptions;

  getTrustStoreOptions(): JksOptions;

  setTrustStoreOptions(trustStoreOptions: JksOptions): AmqpBridgeOptions;

  isUseAlpn(): boolean;

  setUseAlpn(useAlpn: boolean): AmqpBridgeOptions;

  isUsePooledBuffers(): boolean;

  setUsePooledBuffers(usePooledBuffers: boolean): AmqpBridgeOptions;

  /**
   * Sets the value to use as the hostname field in the AMQP Open frame. Defaults to null, which indicates the hostname
   * value given when starting the bridge will be used to populate the hostname field.
   */
  getVhost(): string;

  /**
   * Sets the value to use as the hostname field in the AMQP Open frame. Defaults to null, which indicates the hostname
   * value given when starting the bridge will be used to populate the hostname field.
   */
  setVhost(vhost: string): AmqpBridgeOptions;

  getVirtualHost(): string;

  setVirtualHost(virtualHost: string): AmqpBridgeOptions;

}
